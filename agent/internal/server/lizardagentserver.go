// Code generated by goctl. DO NOT EDIT!
// Source: agent.proto

package server

import (
	"context"

	"github.com/hongyuxuan/lizardcd/agent/internal/logic"
	"github.com/hongyuxuan/lizardcd/agent/internal/svc"
	"github.com/hongyuxuan/lizardcd/agent/types/agent"
)

type LizardAgentServer struct {
	svcCtx *svc.ServiceContext
	agent.UnimplementedLizardAgentServer
}

func NewLizardAgentServer(svcCtx *svc.ServiceContext) *LizardAgentServer {
	return &LizardAgentServer{
		svcCtx: svcCtx,
	}
}

// kubernetes
func (s *LizardAgentServer) PatchDeployment(ctx context.Context, in *agent.PatchWorkloadRequest) (*agent.Response, error) {
	l := logic.NewPatchDeploymentLogic(ctx, s.svcCtx)
	return l.PatchDeployment(in)
}

func (s *LizardAgentServer) PatchStatefulset(ctx context.Context, in *agent.PatchWorkloadRequest) (*agent.Response, error) {
	l := logic.NewPatchStatefulsetLogic(ctx, s.svcCtx)
	return l.PatchStatefulset(in)
}

func (s *LizardAgentServer) ListDeployment(ctx context.Context, in *agent.ListResourceRequest) (*agent.Response, error) {
	l := logic.NewListDeploymentLogic(ctx, s.svcCtx)
	return l.ListDeployment(in)
}

func (s *LizardAgentServer) ListStatefulset(ctx context.Context, in *agent.ListResourceRequest) (*agent.Response, error) {
	l := logic.NewListStatefulsetLogic(ctx, s.svcCtx)
	return l.ListStatefulset(in)
}

func (s *LizardAgentServer) DeleteDeployment(ctx context.Context, in *agent.GetWorkloadRequest) (*agent.Response, error) {
	l := logic.NewDeleteDeploymentLogic(ctx, s.svcCtx)
	return l.DeleteDeployment(in)
}

func (s *LizardAgentServer) DeleteStatefulset(ctx context.Context, in *agent.GetWorkloadRequest) (*agent.Response, error) {
	l := logic.NewDeleteStatefulsetLogic(ctx, s.svcCtx)
	return l.DeleteStatefulset(in)
}

func (s *LizardAgentServer) GetDeploymentPod(ctx context.Context, in *agent.GetWorkloadRequest) (*agent.Response, error) {
	l := logic.NewGetDeploymentPodLogic(ctx, s.svcCtx)
	return l.GetDeploymentPod(in)
}

func (s *LizardAgentServer) GetStatefulsetPod(ctx context.Context, in *agent.GetWorkloadRequest) (*agent.Response, error) {
	l := logic.NewGetStatefulsetPodLogic(ctx, s.svcCtx)
	return l.GetStatefulsetPod(in)
}

func (s *LizardAgentServer) GetEvent(ctx context.Context, in *agent.GetEventRequest) (*agent.Response, error) {
	l := logic.NewGetEventLogic(ctx, s.svcCtx)
	return l.GetEvent(in)
}

func (s *LizardAgentServer) GetPodStatus(ctx context.Context, in *agent.GetWorkloadRequest) (*agent.Response, error) {
	l := logic.NewGetPodStatusLogic(ctx, s.svcCtx)
	return l.GetPodStatus(in)
}

func (s *LizardAgentServer) DeleteYaml(ctx context.Context, in *agent.YamlRequest) (*agent.Response, error) {
	l := logic.NewDeleteYamlLogic(ctx, s.svcCtx)
	return l.DeleteYaml(in)
}

func (s *LizardAgentServer) ApplyYaml(ctx context.Context, in *agent.YamlRequest) (*agent.Response, error) {
	l := logic.NewApplyYamlLogic(ctx, s.svcCtx)
	return l.ApplyYaml(in)
}

func (s *LizardAgentServer) Getyaml(ctx context.Context, in *agent.GetYamlRequest) (*agent.YamlResponse, error) {
	l := logic.NewGetyamlLogic(ctx, s.svcCtx)
	return l.Getyaml(in)
}

func (s *LizardAgentServer) RolloutDeployment(ctx context.Context, in *agent.RolloutWorkloadRequest) (*agent.Response, error) {
	l := logic.NewRolloutDeploymentLogic(ctx, s.svcCtx)
	return l.RolloutDeployment(in)
}

func (s *LizardAgentServer) RolloutStatefulset(ctx context.Context, in *agent.RolloutWorkloadRequest) (*agent.Response, error) {
	l := logic.NewRolloutStatefulsetLogic(ctx, s.svcCtx)
	return l.RolloutStatefulset(in)
}

func (s *LizardAgentServer) ScaleDeployment(ctx context.Context, in *agent.ScaleRequest) (*agent.Response, error) {
	l := logic.NewScaleDeploymentLogic(ctx, s.svcCtx)
	return l.ScaleDeployment(in)
}

func (s *LizardAgentServer) ScaleStatefulset(ctx context.Context, in *agent.ScaleRequest) (*agent.Response, error) {
	l := logic.NewScaleStatefulsetLogic(ctx, s.svcCtx)
	return l.ScaleStatefulset(in)
}

func (s *LizardAgentServer) GetNamespaces(ctx context.Context, in *agent.LabelSelector) (*agent.Response, error) {
	l := logic.NewGetNamespacesLogic(ctx, s.svcCtx)
	return l.GetNamespaces(in)
}

func (s *LizardAgentServer) GetDeployment(ctx context.Context, in *agent.GetWorkloadRequest) (*agent.Response, error) {
	l := logic.NewGetDeploymentLogic(ctx, s.svcCtx)
	return l.GetDeployment(in)
}

func (s *LizardAgentServer) GetStatefulset(ctx context.Context, in *agent.GetWorkloadRequest) (*agent.Response, error) {
	l := logic.NewGetStatefulsetLogic(ctx, s.svcCtx)
	return l.GetStatefulset(in)
}

func (s *LizardAgentServer) GetDeploymentQuota(ctx context.Context, in *agent.GetWorkloadRequest) (*agent.Response, error) {
	l := logic.NewGetDeploymentQuotaLogic(ctx, s.svcCtx)
	return l.GetDeploymentQuota(in)
}

func (s *LizardAgentServer) GetStatefulsetQuota(ctx context.Context, in *agent.GetWorkloadRequest) (*agent.Response, error) {
	l := logic.NewGetStatefulsetQuotaLogic(ctx, s.svcCtx)
	return l.GetStatefulsetQuota(in)
}

// istio
func (s *LizardAgentServer) CreateDestinationRule(ctx context.Context, in *agent.IstioCreateRequest) (*agent.Response, error) {
	l := logic.NewCreateDestinationRuleLogic(ctx, s.svcCtx)
	return l.CreateDestinationRule(in)
}

func (s *LizardAgentServer) PatchDestinationRule(ctx context.Context, in *agent.IstioPatchRequest) (*agent.Response, error) {
	l := logic.NewPatchDestinationRuleLogic(ctx, s.svcCtx)
	return l.PatchDestinationRule(in)
}

func (s *LizardAgentServer) ListDestinationRule(ctx context.Context, in *agent.ListResourceRequest) (*agent.Response, error) {
	l := logic.NewListDestinationRuleLogic(ctx, s.svcCtx)
	return l.ListDestinationRule(in)
}

func (s *LizardAgentServer) GetDestinationRule(ctx context.Context, in *agent.IstioGetRequest) (*agent.Response, error) {
	l := logic.NewGetDestinationRuleLogic(ctx, s.svcCtx)
	return l.GetDestinationRule(in)
}

func (s *LizardAgentServer) DeleteDestinationRule(ctx context.Context, in *agent.IstioGetRequest) (*agent.Response, error) {
	l := logic.NewDeleteDestinationRuleLogic(ctx, s.svcCtx)
	return l.DeleteDestinationRule(in)
}

func (s *LizardAgentServer) CreateVirtualService(ctx context.Context, in *agent.IstioCreateRequest) (*agent.Response, error) {
	l := logic.NewCreateVirtualServiceLogic(ctx, s.svcCtx)
	return l.CreateVirtualService(in)
}

func (s *LizardAgentServer) PatchVirtualService(ctx context.Context, in *agent.IstioPatchRequest) (*agent.Response, error) {
	l := logic.NewPatchVirtualServiceLogic(ctx, s.svcCtx)
	return l.PatchVirtualService(in)
}

func (s *LizardAgentServer) ListVirtualService(ctx context.Context, in *agent.ListResourceRequest) (*agent.Response, error) {
	l := logic.NewListVirtualServiceLogic(ctx, s.svcCtx)
	return l.ListVirtualService(in)
}

func (s *LizardAgentServer) GetVirtualService(ctx context.Context, in *agent.IstioGetRequest) (*agent.Response, error) {
	l := logic.NewGetVirtualServiceLogic(ctx, s.svcCtx)
	return l.GetVirtualService(in)
}

func (s *LizardAgentServer) DeleteVirtualService(ctx context.Context, in *agent.IstioGetRequest) (*agent.Response, error) {
	l := logic.NewDeleteVirtualServiceLogic(ctx, s.svcCtx)
	return l.DeleteVirtualService(in)
}

// helm
func (s *LizardAgentServer) HelmUpdateRepo(ctx context.Context, in *agent.HelmEntriesRequest) (*agent.Response, error) {
	l := logic.NewHelmUpdateRepoLogic(ctx, s.svcCtx)
	return l.HelmUpdateRepo(in)
}

func (s *LizardAgentServer) HelmInstallChart(ctx context.Context, in *agent.HelmInstallChartRequest) (*agent.Response, error) {
	l := logic.NewHelmInstallChartLogic(ctx, s.svcCtx)
	return l.HelmInstallChart(in)
}

func (s *LizardAgentServer) HelmUninstallChart(ctx context.Context, in *agent.HelmInstallChartRequest) (*agent.Response, error) {
	l := logic.NewHelmUninstallChartLogic(ctx, s.svcCtx)
	return l.HelmUninstallChart(in)
}

func (s *LizardAgentServer) HelmUpgradeChart(ctx context.Context, in *agent.HelmInstallChartRequest) (*agent.Response, error) {
	l := logic.NewHelmUpgradeChartLogic(ctx, s.svcCtx)
	return l.HelmUpgradeChart(in)
}

func (s *LizardAgentServer) HelmListReleases(ctx context.Context, in *agent.ListReleasesRequest) (*agent.Response, error) {
	l := logic.NewHelmListReleasesLogic(ctx, s.svcCtx)
	return l.HelmListReleases(in)
}

func (s *LizardAgentServer) HelmGetValues(ctx context.Context, in *agent.ListReleasesRequest) (*agent.Response, error) {
	l := logic.NewHelmGetValuesLogic(ctx, s.svcCtx)
	return l.HelmGetValues(in)
}

func (s *LizardAgentServer) HelmReleaseHistory(ctx context.Context, in *agent.ListReleasesRequest) (*agent.Response, error) {
	l := logic.NewHelmReleaseHistoryLogic(ctx, s.svcCtx)
	return l.HelmReleaseHistory(in)
}

func (s *LizardAgentServer) HelmRollback(ctx context.Context, in *agent.HelmInstallChartRequest) (*agent.Response, error) {
	l := logic.NewHelmRollbackLogic(ctx, s.svcCtx)
	return l.HelmRollback(in)
}
