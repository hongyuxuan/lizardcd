// Code generated by goctl. DO NOT EDIT!
// Source: agent.proto

package lizardagent

import (
	"context"

	"github.com/hongyuxuan/lizardcd/agent/types/agent"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetPodEventRequest     = agent.GetPodEventRequest
	GetWorkloadRequest     = agent.GetWorkloadRequest
	GetYamlRequest         = agent.GetYamlRequest
	LabelSelector          = agent.LabelSelector
	ListWorkloadRequest    = agent.ListWorkloadRequest
	PatchWorkloadRequest   = agent.PatchWorkloadRequest
	Response               = agent.Response
	RolloutWorkloadRequest = agent.RolloutWorkloadRequest
	ScaleRequest           = agent.ScaleRequest
	YamlRequest            = agent.YamlRequest
	YamlResponse           = agent.YamlResponse

	LizardAgent interface {
		PatchDeployment(ctx context.Context, in *PatchWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
		PatchStatefulset(ctx context.Context, in *PatchWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
		ListDeployment(ctx context.Context, in *ListWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
		ListStatefulset(ctx context.Context, in *ListWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
		DeleteDeployment(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
		DeleteStatefulset(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
		GetDeploymentPod(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
		GetStatefulsetPod(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
		GetPodEvent(ctx context.Context, in *GetPodEventRequest, opts ...grpc.CallOption) (*Response, error)
		DeleteYaml(ctx context.Context, in *YamlRequest, opts ...grpc.CallOption) (*Response, error)
		ApplyYaml(ctx context.Context, in *YamlRequest, opts ...grpc.CallOption) (*Response, error)
		Getyaml(ctx context.Context, in *GetYamlRequest, opts ...grpc.CallOption) (*YamlResponse, error)
		RolloutDeployment(ctx context.Context, in *RolloutWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
		RolloutStatefulset(ctx context.Context, in *RolloutWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
		ScaleDeployment(ctx context.Context, in *ScaleRequest, opts ...grpc.CallOption) (*Response, error)
		ScaleStatefulset(ctx context.Context, in *ScaleRequest, opts ...grpc.CallOption) (*Response, error)
		GetNamespaces(ctx context.Context, in *LabelSelector, opts ...grpc.CallOption) (*Response, error)
	}

	defaultLizardAgent struct {
		cli zrpc.Client
	}
)

func NewLizardAgent(cli zrpc.Client) LizardAgent {
	return &defaultLizardAgent{
		cli: cli,
	}
}

func (m *defaultLizardAgent) PatchDeployment(ctx context.Context, in *PatchWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	client := agent.NewLizardAgentClient(m.cli.Conn())
	return client.PatchDeployment(ctx, in, opts...)
}

func (m *defaultLizardAgent) PatchStatefulset(ctx context.Context, in *PatchWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	client := agent.NewLizardAgentClient(m.cli.Conn())
	return client.PatchStatefulset(ctx, in, opts...)
}

func (m *defaultLizardAgent) ListDeployment(ctx context.Context, in *ListWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	client := agent.NewLizardAgentClient(m.cli.Conn())
	return client.ListDeployment(ctx, in, opts...)
}

func (m *defaultLizardAgent) ListStatefulset(ctx context.Context, in *ListWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	client := agent.NewLizardAgentClient(m.cli.Conn())
	return client.ListStatefulset(ctx, in, opts...)
}

func (m *defaultLizardAgent) DeleteDeployment(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	client := agent.NewLizardAgentClient(m.cli.Conn())
	return client.DeleteDeployment(ctx, in, opts...)
}

func (m *defaultLizardAgent) DeleteStatefulset(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	client := agent.NewLizardAgentClient(m.cli.Conn())
	return client.DeleteStatefulset(ctx, in, opts...)
}

func (m *defaultLizardAgent) GetDeploymentPod(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	client := agent.NewLizardAgentClient(m.cli.Conn())
	return client.GetDeploymentPod(ctx, in, opts...)
}

func (m *defaultLizardAgent) GetStatefulsetPod(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	client := agent.NewLizardAgentClient(m.cli.Conn())
	return client.GetStatefulsetPod(ctx, in, opts...)
}

func (m *defaultLizardAgent) GetPodEvent(ctx context.Context, in *GetPodEventRequest, opts ...grpc.CallOption) (*Response, error) {
	client := agent.NewLizardAgentClient(m.cli.Conn())
	return client.GetPodEvent(ctx, in, opts...)
}

func (m *defaultLizardAgent) DeleteYaml(ctx context.Context, in *YamlRequest, opts ...grpc.CallOption) (*Response, error) {
	client := agent.NewLizardAgentClient(m.cli.Conn())
	return client.DeleteYaml(ctx, in, opts...)
}

func (m *defaultLizardAgent) ApplyYaml(ctx context.Context, in *YamlRequest, opts ...grpc.CallOption) (*Response, error) {
	client := agent.NewLizardAgentClient(m.cli.Conn())
	return client.ApplyYaml(ctx, in, opts...)
}

func (m *defaultLizardAgent) Getyaml(ctx context.Context, in *GetYamlRequest, opts ...grpc.CallOption) (*YamlResponse, error) {
	client := agent.NewLizardAgentClient(m.cli.Conn())
	return client.Getyaml(ctx, in, opts...)
}

func (m *defaultLizardAgent) RolloutDeployment(ctx context.Context, in *RolloutWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	client := agent.NewLizardAgentClient(m.cli.Conn())
	return client.RolloutDeployment(ctx, in, opts...)
}

func (m *defaultLizardAgent) RolloutStatefulset(ctx context.Context, in *RolloutWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	client := agent.NewLizardAgentClient(m.cli.Conn())
	return client.RolloutStatefulset(ctx, in, opts...)
}

func (m *defaultLizardAgent) ScaleDeployment(ctx context.Context, in *ScaleRequest, opts ...grpc.CallOption) (*Response, error) {
	client := agent.NewLizardAgentClient(m.cli.Conn())
	return client.ScaleDeployment(ctx, in, opts...)
}

func (m *defaultLizardAgent) ScaleStatefulset(ctx context.Context, in *ScaleRequest, opts ...grpc.CallOption) (*Response, error) {
	client := agent.NewLizardAgentClient(m.cli.Conn())
	return client.ScaleStatefulset(ctx, in, opts...)
}

func (m *defaultLizardAgent) GetNamespaces(ctx context.Context, in *LabelSelector, opts ...grpc.CallOption) (*Response, error) {
	client := agent.NewLizardAgentClient(m.cli.Conn())
	return client.GetNamespaces(ctx, in, opts...)
}
