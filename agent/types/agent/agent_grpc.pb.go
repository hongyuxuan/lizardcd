// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: agent.proto

package agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LizardAgentClient is the client API for LizardAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LizardAgentClient interface {
	PatchDeployment(ctx context.Context, in *PatchWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
	PatchStatefulset(ctx context.Context, in *PatchWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
	ListDeployment(ctx context.Context, in *ListWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
	ListStatefulset(ctx context.Context, in *ListWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
	GetDeploymentPod(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
	GetStatefulsetPod(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
	GetPodEvent(ctx context.Context, in *GetPodEventRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteYaml(ctx context.Context, in *YamlRequest, opts ...grpc.CallOption) (*Response, error)
	ApplyYaml(ctx context.Context, in *YamlRequest, opts ...grpc.CallOption) (*Response, error)
	Getyaml(ctx context.Context, in *GetYamlRequest, opts ...grpc.CallOption) (*YamlResponse, error)
	RolloutDeployment(ctx context.Context, in *RolloutWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
	RolloutStatefulset(ctx context.Context, in *RolloutWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
	ScaleDeployment(ctx context.Context, in *ScaleRequest, opts ...grpc.CallOption) (*Response, error)
	ScaleStatefulset(ctx context.Context, in *ScaleRequest, opts ...grpc.CallOption) (*Response, error)
	GetNamespaces(ctx context.Context, in *LabelSelector, opts ...grpc.CallOption) (*Response, error)
}

type lizardAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewLizardAgentClient(cc grpc.ClientConnInterface) LizardAgentClient {
	return &lizardAgentClient{cc}
}

func (c *lizardAgentClient) PatchDeployment(ctx context.Context, in *PatchWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/patchDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) PatchStatefulset(ctx context.Context, in *PatchWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/patchStatefulset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) ListDeployment(ctx context.Context, in *ListWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/listDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) ListStatefulset(ctx context.Context, in *ListWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/listStatefulset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) GetDeploymentPod(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/getDeploymentPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) GetStatefulsetPod(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/getStatefulsetPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) GetPodEvent(ctx context.Context, in *GetPodEventRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/getPodEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) DeleteYaml(ctx context.Context, in *YamlRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/deleteYaml", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) ApplyYaml(ctx context.Context, in *YamlRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/applyYaml", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) Getyaml(ctx context.Context, in *GetYamlRequest, opts ...grpc.CallOption) (*YamlResponse, error) {
	out := new(YamlResponse)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/getyaml", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) RolloutDeployment(ctx context.Context, in *RolloutWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/rolloutDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) RolloutStatefulset(ctx context.Context, in *RolloutWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/rolloutStatefulset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) ScaleDeployment(ctx context.Context, in *ScaleRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/scaleDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) ScaleStatefulset(ctx context.Context, in *ScaleRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/scaleStatefulset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) GetNamespaces(ctx context.Context, in *LabelSelector, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/getNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LizardAgentServer is the server API for LizardAgent service.
// All implementations must embed UnimplementedLizardAgentServer
// for forward compatibility
type LizardAgentServer interface {
	PatchDeployment(context.Context, *PatchWorkloadRequest) (*Response, error)
	PatchStatefulset(context.Context, *PatchWorkloadRequest) (*Response, error)
	ListDeployment(context.Context, *ListWorkloadRequest) (*Response, error)
	ListStatefulset(context.Context, *ListWorkloadRequest) (*Response, error)
	GetDeploymentPod(context.Context, *GetWorkloadRequest) (*Response, error)
	GetStatefulsetPod(context.Context, *GetWorkloadRequest) (*Response, error)
	GetPodEvent(context.Context, *GetPodEventRequest) (*Response, error)
	DeleteYaml(context.Context, *YamlRequest) (*Response, error)
	ApplyYaml(context.Context, *YamlRequest) (*Response, error)
	Getyaml(context.Context, *GetYamlRequest) (*YamlResponse, error)
	RolloutDeployment(context.Context, *RolloutWorkloadRequest) (*Response, error)
	RolloutStatefulset(context.Context, *RolloutWorkloadRequest) (*Response, error)
	ScaleDeployment(context.Context, *ScaleRequest) (*Response, error)
	ScaleStatefulset(context.Context, *ScaleRequest) (*Response, error)
	GetNamespaces(context.Context, *LabelSelector) (*Response, error)
	mustEmbedUnimplementedLizardAgentServer()
}

// UnimplementedLizardAgentServer must be embedded to have forward compatible implementations.
type UnimplementedLizardAgentServer struct {
}

func (UnimplementedLizardAgentServer) PatchDeployment(context.Context, *PatchWorkloadRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchDeployment not implemented")
}
func (UnimplementedLizardAgentServer) PatchStatefulset(context.Context, *PatchWorkloadRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchStatefulset not implemented")
}
func (UnimplementedLizardAgentServer) ListDeployment(context.Context, *ListWorkloadRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeployment not implemented")
}
func (UnimplementedLizardAgentServer) ListStatefulset(context.Context, *ListWorkloadRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStatefulset not implemented")
}
func (UnimplementedLizardAgentServer) GetDeploymentPod(context.Context, *GetWorkloadRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentPod not implemented")
}
func (UnimplementedLizardAgentServer) GetStatefulsetPod(context.Context, *GetWorkloadRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatefulsetPod not implemented")
}
func (UnimplementedLizardAgentServer) GetPodEvent(context.Context, *GetPodEventRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPodEvent not implemented")
}
func (UnimplementedLizardAgentServer) DeleteYaml(context.Context, *YamlRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteYaml not implemented")
}
func (UnimplementedLizardAgentServer) ApplyYaml(context.Context, *YamlRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyYaml not implemented")
}
func (UnimplementedLizardAgentServer) Getyaml(context.Context, *GetYamlRequest) (*YamlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getyaml not implemented")
}
func (UnimplementedLizardAgentServer) RolloutDeployment(context.Context, *RolloutWorkloadRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RolloutDeployment not implemented")
}
func (UnimplementedLizardAgentServer) RolloutStatefulset(context.Context, *RolloutWorkloadRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RolloutStatefulset not implemented")
}
func (UnimplementedLizardAgentServer) ScaleDeployment(context.Context, *ScaleRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScaleDeployment not implemented")
}
func (UnimplementedLizardAgentServer) ScaleStatefulset(context.Context, *ScaleRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScaleStatefulset not implemented")
}
func (UnimplementedLizardAgentServer) GetNamespaces(context.Context, *LabelSelector) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespaces not implemented")
}
func (UnimplementedLizardAgentServer) mustEmbedUnimplementedLizardAgentServer() {}

// UnsafeLizardAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LizardAgentServer will
// result in compilation errors.
type UnsafeLizardAgentServer interface {
	mustEmbedUnimplementedLizardAgentServer()
}

func RegisterLizardAgentServer(s grpc.ServiceRegistrar, srv LizardAgentServer) {
	s.RegisterService(&LizardAgent_ServiceDesc, srv)
}

func _LizardAgent_PatchDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).PatchDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/patchDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).PatchDeployment(ctx, req.(*PatchWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_PatchStatefulset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).PatchStatefulset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/patchStatefulset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).PatchStatefulset(ctx, req.(*PatchWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_ListDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).ListDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/listDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).ListDeployment(ctx, req.(*ListWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_ListStatefulset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).ListStatefulset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/listStatefulset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).ListStatefulset(ctx, req.(*ListWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_GetDeploymentPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).GetDeploymentPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/getDeploymentPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).GetDeploymentPod(ctx, req.(*GetWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_GetStatefulsetPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).GetStatefulsetPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/getStatefulsetPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).GetStatefulsetPod(ctx, req.(*GetWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_GetPodEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).GetPodEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/getPodEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).GetPodEvent(ctx, req.(*GetPodEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_DeleteYaml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YamlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).DeleteYaml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/deleteYaml",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).DeleteYaml(ctx, req.(*YamlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_ApplyYaml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YamlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).ApplyYaml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/applyYaml",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).ApplyYaml(ctx, req.(*YamlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_Getyaml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetYamlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).Getyaml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/getyaml",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).Getyaml(ctx, req.(*GetYamlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_RolloutDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolloutWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).RolloutDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/rolloutDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).RolloutDeployment(ctx, req.(*RolloutWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_RolloutStatefulset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolloutWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).RolloutStatefulset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/rolloutStatefulset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).RolloutStatefulset(ctx, req.(*RolloutWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_ScaleDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).ScaleDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/scaleDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).ScaleDeployment(ctx, req.(*ScaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_ScaleStatefulset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).ScaleStatefulset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/scaleStatefulset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).ScaleStatefulset(ctx, req.(*ScaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_GetNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).GetNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/getNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).GetNamespaces(ctx, req.(*LabelSelector))
	}
	return interceptor(ctx, in, info, handler)
}

// LizardAgent_ServiceDesc is the grpc.ServiceDesc for LizardAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LizardAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.LizardAgent",
	HandlerType: (*LizardAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "patchDeployment",
			Handler:    _LizardAgent_PatchDeployment_Handler,
		},
		{
			MethodName: "patchStatefulset",
			Handler:    _LizardAgent_PatchStatefulset_Handler,
		},
		{
			MethodName: "listDeployment",
			Handler:    _LizardAgent_ListDeployment_Handler,
		},
		{
			MethodName: "listStatefulset",
			Handler:    _LizardAgent_ListStatefulset_Handler,
		},
		{
			MethodName: "getDeploymentPod",
			Handler:    _LizardAgent_GetDeploymentPod_Handler,
		},
		{
			MethodName: "getStatefulsetPod",
			Handler:    _LizardAgent_GetStatefulsetPod_Handler,
		},
		{
			MethodName: "getPodEvent",
			Handler:    _LizardAgent_GetPodEvent_Handler,
		},
		{
			MethodName: "deleteYaml",
			Handler:    _LizardAgent_DeleteYaml_Handler,
		},
		{
			MethodName: "applyYaml",
			Handler:    _LizardAgent_ApplyYaml_Handler,
		},
		{
			MethodName: "getyaml",
			Handler:    _LizardAgent_Getyaml_Handler,
		},
		{
			MethodName: "rolloutDeployment",
			Handler:    _LizardAgent_RolloutDeployment_Handler,
		},
		{
			MethodName: "rolloutStatefulset",
			Handler:    _LizardAgent_RolloutStatefulset_Handler,
		},
		{
			MethodName: "scaleDeployment",
			Handler:    _LizardAgent_ScaleDeployment_Handler,
		},
		{
			MethodName: "scaleStatefulset",
			Handler:    _LizardAgent_ScaleStatefulset_Handler,
		},
		{
			MethodName: "getNamespaces",
			Handler:    _LizardAgent_GetNamespaces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent.proto",
}
