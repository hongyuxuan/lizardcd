// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: agent.proto

package agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LizardAgentClient is the client API for LizardAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LizardAgentClient interface {
	// kubernetes
	PatchDeployment(ctx context.Context, in *PatchWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
	PatchStatefulset(ctx context.Context, in *PatchWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
	ListDeployment(ctx context.Context, in *ListResourceRequest, opts ...grpc.CallOption) (*Response, error)
	ListStatefulset(ctx context.Context, in *ListResourceRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteDeployment(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteStatefulset(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
	GetDeploymentPod(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
	GetStatefulsetPod(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
	GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*Response, error)
	GetPodStatus(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteYaml(ctx context.Context, in *YamlRequest, opts ...grpc.CallOption) (*Response, error)
	ApplyYaml(ctx context.Context, in *YamlRequest, opts ...grpc.CallOption) (*Response, error)
	Getyaml(ctx context.Context, in *GetYamlRequest, opts ...grpc.CallOption) (*YamlResponse, error)
	RolloutDeployment(ctx context.Context, in *RolloutWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
	RolloutStatefulset(ctx context.Context, in *RolloutWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
	ScaleDeployment(ctx context.Context, in *ScaleRequest, opts ...grpc.CallOption) (*Response, error)
	ScaleStatefulset(ctx context.Context, in *ScaleRequest, opts ...grpc.CallOption) (*Response, error)
	GetNamespaces(ctx context.Context, in *LabelSelector, opts ...grpc.CallOption) (*Response, error)
	GetDeployment(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
	GetStatefulset(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
	GetDeploymentQuota(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
	GetStatefulsetQuota(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error)
	// istio
	CreateDestinationRule(ctx context.Context, in *IstioCreateRequest, opts ...grpc.CallOption) (*Response, error)
	PatchDestinationRule(ctx context.Context, in *IstioPatchRequest, opts ...grpc.CallOption) (*Response, error)
	ListDestinationRule(ctx context.Context, in *ListResourceRequest, opts ...grpc.CallOption) (*Response, error)
	GetDestinationRule(ctx context.Context, in *IstioGetRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteDestinationRule(ctx context.Context, in *IstioGetRequest, opts ...grpc.CallOption) (*Response, error)
	CreateVirtualService(ctx context.Context, in *IstioCreateRequest, opts ...grpc.CallOption) (*Response, error)
	PatchVirtualService(ctx context.Context, in *IstioPatchRequest, opts ...grpc.CallOption) (*Response, error)
	ListVirtualService(ctx context.Context, in *ListResourceRequest, opts ...grpc.CallOption) (*Response, error)
	GetVirtualService(ctx context.Context, in *IstioGetRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteVirtualService(ctx context.Context, in *IstioGetRequest, opts ...grpc.CallOption) (*Response, error)
	// helm
	HelmUpdateRepo(ctx context.Context, in *HelmEntriesRequest, opts ...grpc.CallOption) (*Response, error)
	HelmInstallChart(ctx context.Context, in *HelmInstallChartRequest, opts ...grpc.CallOption) (*Response, error)
	HelmUninstallChart(ctx context.Context, in *HelmInstallChartRequest, opts ...grpc.CallOption) (*Response, error)
	HelmUpgradeChart(ctx context.Context, in *HelmInstallChartRequest, opts ...grpc.CallOption) (*Response, error)
	HelmListReleases(ctx context.Context, in *ListReleasesRequest, opts ...grpc.CallOption) (*Response, error)
	HelmGetValues(ctx context.Context, in *ListReleasesRequest, opts ...grpc.CallOption) (*Response, error)
	HelmReleaseHistory(ctx context.Context, in *ListReleasesRequest, opts ...grpc.CallOption) (*Response, error)
	HelmRollback(ctx context.Context, in *HelmInstallChartRequest, opts ...grpc.CallOption) (*Response, error)
}

type lizardAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewLizardAgentClient(cc grpc.ClientConnInterface) LizardAgentClient {
	return &lizardAgentClient{cc}
}

func (c *lizardAgentClient) PatchDeployment(ctx context.Context, in *PatchWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/patchDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) PatchStatefulset(ctx context.Context, in *PatchWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/patchStatefulset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) ListDeployment(ctx context.Context, in *ListResourceRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/listDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) ListStatefulset(ctx context.Context, in *ListResourceRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/listStatefulset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) DeleteDeployment(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/deleteDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) DeleteStatefulset(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/deleteStatefulset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) GetDeploymentPod(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/getDeploymentPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) GetStatefulsetPod(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/getStatefulsetPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/getEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) GetPodStatus(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/getPodStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) DeleteYaml(ctx context.Context, in *YamlRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/deleteYaml", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) ApplyYaml(ctx context.Context, in *YamlRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/applyYaml", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) Getyaml(ctx context.Context, in *GetYamlRequest, opts ...grpc.CallOption) (*YamlResponse, error) {
	out := new(YamlResponse)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/getyaml", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) RolloutDeployment(ctx context.Context, in *RolloutWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/rolloutDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) RolloutStatefulset(ctx context.Context, in *RolloutWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/rolloutStatefulset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) ScaleDeployment(ctx context.Context, in *ScaleRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/scaleDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) ScaleStatefulset(ctx context.Context, in *ScaleRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/scaleStatefulset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) GetNamespaces(ctx context.Context, in *LabelSelector, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/getNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) GetDeployment(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/getDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) GetStatefulset(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/getStatefulset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) GetDeploymentQuota(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/getDeploymentQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) GetStatefulsetQuota(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/getStatefulsetQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) CreateDestinationRule(ctx context.Context, in *IstioCreateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/createDestinationRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) PatchDestinationRule(ctx context.Context, in *IstioPatchRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/patchDestinationRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) ListDestinationRule(ctx context.Context, in *ListResourceRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/listDestinationRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) GetDestinationRule(ctx context.Context, in *IstioGetRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/getDestinationRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) DeleteDestinationRule(ctx context.Context, in *IstioGetRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/deleteDestinationRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) CreateVirtualService(ctx context.Context, in *IstioCreateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/createVirtualService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) PatchVirtualService(ctx context.Context, in *IstioPatchRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/patchVirtualService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) ListVirtualService(ctx context.Context, in *ListResourceRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/listVirtualService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) GetVirtualService(ctx context.Context, in *IstioGetRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/getVirtualService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) DeleteVirtualService(ctx context.Context, in *IstioGetRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/deleteVirtualService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) HelmUpdateRepo(ctx context.Context, in *HelmEntriesRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/helmUpdateRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) HelmInstallChart(ctx context.Context, in *HelmInstallChartRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/helmInstallChart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) HelmUninstallChart(ctx context.Context, in *HelmInstallChartRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/helmUninstallChart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) HelmUpgradeChart(ctx context.Context, in *HelmInstallChartRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/helmUpgradeChart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) HelmListReleases(ctx context.Context, in *ListReleasesRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/helmListReleases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) HelmGetValues(ctx context.Context, in *ListReleasesRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/helmGetValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) HelmReleaseHistory(ctx context.Context, in *ListReleasesRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/helmReleaseHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lizardAgentClient) HelmRollback(ctx context.Context, in *HelmInstallChartRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/agent.LizardAgent/helmRollback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LizardAgentServer is the server API for LizardAgent service.
// All implementations must embed UnimplementedLizardAgentServer
// for forward compatibility
type LizardAgentServer interface {
	// kubernetes
	PatchDeployment(context.Context, *PatchWorkloadRequest) (*Response, error)
	PatchStatefulset(context.Context, *PatchWorkloadRequest) (*Response, error)
	ListDeployment(context.Context, *ListResourceRequest) (*Response, error)
	ListStatefulset(context.Context, *ListResourceRequest) (*Response, error)
	DeleteDeployment(context.Context, *GetWorkloadRequest) (*Response, error)
	DeleteStatefulset(context.Context, *GetWorkloadRequest) (*Response, error)
	GetDeploymentPod(context.Context, *GetWorkloadRequest) (*Response, error)
	GetStatefulsetPod(context.Context, *GetWorkloadRequest) (*Response, error)
	GetEvent(context.Context, *GetEventRequest) (*Response, error)
	GetPodStatus(context.Context, *GetWorkloadRequest) (*Response, error)
	DeleteYaml(context.Context, *YamlRequest) (*Response, error)
	ApplyYaml(context.Context, *YamlRequest) (*Response, error)
	Getyaml(context.Context, *GetYamlRequest) (*YamlResponse, error)
	RolloutDeployment(context.Context, *RolloutWorkloadRequest) (*Response, error)
	RolloutStatefulset(context.Context, *RolloutWorkloadRequest) (*Response, error)
	ScaleDeployment(context.Context, *ScaleRequest) (*Response, error)
	ScaleStatefulset(context.Context, *ScaleRequest) (*Response, error)
	GetNamespaces(context.Context, *LabelSelector) (*Response, error)
	GetDeployment(context.Context, *GetWorkloadRequest) (*Response, error)
	GetStatefulset(context.Context, *GetWorkloadRequest) (*Response, error)
	GetDeploymentQuota(context.Context, *GetWorkloadRequest) (*Response, error)
	GetStatefulsetQuota(context.Context, *GetWorkloadRequest) (*Response, error)
	// istio
	CreateDestinationRule(context.Context, *IstioCreateRequest) (*Response, error)
	PatchDestinationRule(context.Context, *IstioPatchRequest) (*Response, error)
	ListDestinationRule(context.Context, *ListResourceRequest) (*Response, error)
	GetDestinationRule(context.Context, *IstioGetRequest) (*Response, error)
	DeleteDestinationRule(context.Context, *IstioGetRequest) (*Response, error)
	CreateVirtualService(context.Context, *IstioCreateRequest) (*Response, error)
	PatchVirtualService(context.Context, *IstioPatchRequest) (*Response, error)
	ListVirtualService(context.Context, *ListResourceRequest) (*Response, error)
	GetVirtualService(context.Context, *IstioGetRequest) (*Response, error)
	DeleteVirtualService(context.Context, *IstioGetRequest) (*Response, error)
	// helm
	HelmUpdateRepo(context.Context, *HelmEntriesRequest) (*Response, error)
	HelmInstallChart(context.Context, *HelmInstallChartRequest) (*Response, error)
	HelmUninstallChart(context.Context, *HelmInstallChartRequest) (*Response, error)
	HelmUpgradeChart(context.Context, *HelmInstallChartRequest) (*Response, error)
	HelmListReleases(context.Context, *ListReleasesRequest) (*Response, error)
	HelmGetValues(context.Context, *ListReleasesRequest) (*Response, error)
	HelmReleaseHistory(context.Context, *ListReleasesRequest) (*Response, error)
	HelmRollback(context.Context, *HelmInstallChartRequest) (*Response, error)
	mustEmbedUnimplementedLizardAgentServer()
}

// UnimplementedLizardAgentServer must be embedded to have forward compatible implementations.
type UnimplementedLizardAgentServer struct {
}

func (UnimplementedLizardAgentServer) PatchDeployment(context.Context, *PatchWorkloadRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchDeployment not implemented")
}
func (UnimplementedLizardAgentServer) PatchStatefulset(context.Context, *PatchWorkloadRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchStatefulset not implemented")
}
func (UnimplementedLizardAgentServer) ListDeployment(context.Context, *ListResourceRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeployment not implemented")
}
func (UnimplementedLizardAgentServer) ListStatefulset(context.Context, *ListResourceRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStatefulset not implemented")
}
func (UnimplementedLizardAgentServer) DeleteDeployment(context.Context, *GetWorkloadRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeployment not implemented")
}
func (UnimplementedLizardAgentServer) DeleteStatefulset(context.Context, *GetWorkloadRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStatefulset not implemented")
}
func (UnimplementedLizardAgentServer) GetDeploymentPod(context.Context, *GetWorkloadRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentPod not implemented")
}
func (UnimplementedLizardAgentServer) GetStatefulsetPod(context.Context, *GetWorkloadRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatefulsetPod not implemented")
}
func (UnimplementedLizardAgentServer) GetEvent(context.Context, *GetEventRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedLizardAgentServer) GetPodStatus(context.Context, *GetWorkloadRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPodStatus not implemented")
}
func (UnimplementedLizardAgentServer) DeleteYaml(context.Context, *YamlRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteYaml not implemented")
}
func (UnimplementedLizardAgentServer) ApplyYaml(context.Context, *YamlRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyYaml not implemented")
}
func (UnimplementedLizardAgentServer) Getyaml(context.Context, *GetYamlRequest) (*YamlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getyaml not implemented")
}
func (UnimplementedLizardAgentServer) RolloutDeployment(context.Context, *RolloutWorkloadRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RolloutDeployment not implemented")
}
func (UnimplementedLizardAgentServer) RolloutStatefulset(context.Context, *RolloutWorkloadRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RolloutStatefulset not implemented")
}
func (UnimplementedLizardAgentServer) ScaleDeployment(context.Context, *ScaleRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScaleDeployment not implemented")
}
func (UnimplementedLizardAgentServer) ScaleStatefulset(context.Context, *ScaleRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScaleStatefulset not implemented")
}
func (UnimplementedLizardAgentServer) GetNamespaces(context.Context, *LabelSelector) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespaces not implemented")
}
func (UnimplementedLizardAgentServer) GetDeployment(context.Context, *GetWorkloadRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployment not implemented")
}
func (UnimplementedLizardAgentServer) GetStatefulset(context.Context, *GetWorkloadRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatefulset not implemented")
}
func (UnimplementedLizardAgentServer) GetDeploymentQuota(context.Context, *GetWorkloadRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentQuota not implemented")
}
func (UnimplementedLizardAgentServer) GetStatefulsetQuota(context.Context, *GetWorkloadRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatefulsetQuota not implemented")
}
func (UnimplementedLizardAgentServer) CreateDestinationRule(context.Context, *IstioCreateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDestinationRule not implemented")
}
func (UnimplementedLizardAgentServer) PatchDestinationRule(context.Context, *IstioPatchRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchDestinationRule not implemented")
}
func (UnimplementedLizardAgentServer) ListDestinationRule(context.Context, *ListResourceRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDestinationRule not implemented")
}
func (UnimplementedLizardAgentServer) GetDestinationRule(context.Context, *IstioGetRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDestinationRule not implemented")
}
func (UnimplementedLizardAgentServer) DeleteDestinationRule(context.Context, *IstioGetRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDestinationRule not implemented")
}
func (UnimplementedLizardAgentServer) CreateVirtualService(context.Context, *IstioCreateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVirtualService not implemented")
}
func (UnimplementedLizardAgentServer) PatchVirtualService(context.Context, *IstioPatchRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchVirtualService not implemented")
}
func (UnimplementedLizardAgentServer) ListVirtualService(context.Context, *ListResourceRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVirtualService not implemented")
}
func (UnimplementedLizardAgentServer) GetVirtualService(context.Context, *IstioGetRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVirtualService not implemented")
}
func (UnimplementedLizardAgentServer) DeleteVirtualService(context.Context, *IstioGetRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVirtualService not implemented")
}
func (UnimplementedLizardAgentServer) HelmUpdateRepo(context.Context, *HelmEntriesRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelmUpdateRepo not implemented")
}
func (UnimplementedLizardAgentServer) HelmInstallChart(context.Context, *HelmInstallChartRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelmInstallChart not implemented")
}
func (UnimplementedLizardAgentServer) HelmUninstallChart(context.Context, *HelmInstallChartRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelmUninstallChart not implemented")
}
func (UnimplementedLizardAgentServer) HelmUpgradeChart(context.Context, *HelmInstallChartRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelmUpgradeChart not implemented")
}
func (UnimplementedLizardAgentServer) HelmListReleases(context.Context, *ListReleasesRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelmListReleases not implemented")
}
func (UnimplementedLizardAgentServer) HelmGetValues(context.Context, *ListReleasesRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelmGetValues not implemented")
}
func (UnimplementedLizardAgentServer) HelmReleaseHistory(context.Context, *ListReleasesRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelmReleaseHistory not implemented")
}
func (UnimplementedLizardAgentServer) HelmRollback(context.Context, *HelmInstallChartRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelmRollback not implemented")
}
func (UnimplementedLizardAgentServer) mustEmbedUnimplementedLizardAgentServer() {}

// UnsafeLizardAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LizardAgentServer will
// result in compilation errors.
type UnsafeLizardAgentServer interface {
	mustEmbedUnimplementedLizardAgentServer()
}

func RegisterLizardAgentServer(s grpc.ServiceRegistrar, srv LizardAgentServer) {
	s.RegisterService(&LizardAgent_ServiceDesc, srv)
}

func _LizardAgent_PatchDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).PatchDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/patchDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).PatchDeployment(ctx, req.(*PatchWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_PatchStatefulset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).PatchStatefulset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/patchStatefulset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).PatchStatefulset(ctx, req.(*PatchWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_ListDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).ListDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/listDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).ListDeployment(ctx, req.(*ListResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_ListStatefulset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).ListStatefulset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/listStatefulset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).ListStatefulset(ctx, req.(*ListResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_DeleteDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).DeleteDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/deleteDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).DeleteDeployment(ctx, req.(*GetWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_DeleteStatefulset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).DeleteStatefulset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/deleteStatefulset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).DeleteStatefulset(ctx, req.(*GetWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_GetDeploymentPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).GetDeploymentPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/getDeploymentPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).GetDeploymentPod(ctx, req.(*GetWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_GetStatefulsetPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).GetStatefulsetPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/getStatefulsetPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).GetStatefulsetPod(ctx, req.(*GetWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/getEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).GetEvent(ctx, req.(*GetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_GetPodStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).GetPodStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/getPodStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).GetPodStatus(ctx, req.(*GetWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_DeleteYaml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YamlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).DeleteYaml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/deleteYaml",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).DeleteYaml(ctx, req.(*YamlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_ApplyYaml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YamlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).ApplyYaml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/applyYaml",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).ApplyYaml(ctx, req.(*YamlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_Getyaml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetYamlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).Getyaml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/getyaml",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).Getyaml(ctx, req.(*GetYamlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_RolloutDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolloutWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).RolloutDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/rolloutDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).RolloutDeployment(ctx, req.(*RolloutWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_RolloutStatefulset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolloutWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).RolloutStatefulset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/rolloutStatefulset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).RolloutStatefulset(ctx, req.(*RolloutWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_ScaleDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).ScaleDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/scaleDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).ScaleDeployment(ctx, req.(*ScaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_ScaleStatefulset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).ScaleStatefulset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/scaleStatefulset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).ScaleStatefulset(ctx, req.(*ScaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_GetNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).GetNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/getNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).GetNamespaces(ctx, req.(*LabelSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_GetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).GetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/getDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).GetDeployment(ctx, req.(*GetWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_GetStatefulset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).GetStatefulset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/getStatefulset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).GetStatefulset(ctx, req.(*GetWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_GetDeploymentQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).GetDeploymentQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/getDeploymentQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).GetDeploymentQuota(ctx, req.(*GetWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_GetStatefulsetQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).GetStatefulsetQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/getStatefulsetQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).GetStatefulsetQuota(ctx, req.(*GetWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_CreateDestinationRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IstioCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).CreateDestinationRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/createDestinationRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).CreateDestinationRule(ctx, req.(*IstioCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_PatchDestinationRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IstioPatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).PatchDestinationRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/patchDestinationRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).PatchDestinationRule(ctx, req.(*IstioPatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_ListDestinationRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).ListDestinationRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/listDestinationRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).ListDestinationRule(ctx, req.(*ListResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_GetDestinationRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IstioGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).GetDestinationRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/getDestinationRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).GetDestinationRule(ctx, req.(*IstioGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_DeleteDestinationRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IstioGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).DeleteDestinationRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/deleteDestinationRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).DeleteDestinationRule(ctx, req.(*IstioGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_CreateVirtualService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IstioCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).CreateVirtualService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/createVirtualService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).CreateVirtualService(ctx, req.(*IstioCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_PatchVirtualService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IstioPatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).PatchVirtualService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/patchVirtualService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).PatchVirtualService(ctx, req.(*IstioPatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_ListVirtualService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).ListVirtualService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/listVirtualService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).ListVirtualService(ctx, req.(*ListResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_GetVirtualService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IstioGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).GetVirtualService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/getVirtualService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).GetVirtualService(ctx, req.(*IstioGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_DeleteVirtualService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IstioGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).DeleteVirtualService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/deleteVirtualService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).DeleteVirtualService(ctx, req.(*IstioGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_HelmUpdateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelmEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).HelmUpdateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/helmUpdateRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).HelmUpdateRepo(ctx, req.(*HelmEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_HelmInstallChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelmInstallChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).HelmInstallChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/helmInstallChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).HelmInstallChart(ctx, req.(*HelmInstallChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_HelmUninstallChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelmInstallChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).HelmUninstallChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/helmUninstallChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).HelmUninstallChart(ctx, req.(*HelmInstallChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_HelmUpgradeChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelmInstallChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).HelmUpgradeChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/helmUpgradeChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).HelmUpgradeChart(ctx, req.(*HelmInstallChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_HelmListReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).HelmListReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/helmListReleases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).HelmListReleases(ctx, req.(*ListReleasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_HelmGetValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).HelmGetValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/helmGetValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).HelmGetValues(ctx, req.(*ListReleasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_HelmReleaseHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).HelmReleaseHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/helmReleaseHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).HelmReleaseHistory(ctx, req.(*ListReleasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LizardAgent_HelmRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelmInstallChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LizardAgentServer).HelmRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.LizardAgent/helmRollback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LizardAgentServer).HelmRollback(ctx, req.(*HelmInstallChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LizardAgent_ServiceDesc is the grpc.ServiceDesc for LizardAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LizardAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.LizardAgent",
	HandlerType: (*LizardAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "patchDeployment",
			Handler:    _LizardAgent_PatchDeployment_Handler,
		},
		{
			MethodName: "patchStatefulset",
			Handler:    _LizardAgent_PatchStatefulset_Handler,
		},
		{
			MethodName: "listDeployment",
			Handler:    _LizardAgent_ListDeployment_Handler,
		},
		{
			MethodName: "listStatefulset",
			Handler:    _LizardAgent_ListStatefulset_Handler,
		},
		{
			MethodName: "deleteDeployment",
			Handler:    _LizardAgent_DeleteDeployment_Handler,
		},
		{
			MethodName: "deleteStatefulset",
			Handler:    _LizardAgent_DeleteStatefulset_Handler,
		},
		{
			MethodName: "getDeploymentPod",
			Handler:    _LizardAgent_GetDeploymentPod_Handler,
		},
		{
			MethodName: "getStatefulsetPod",
			Handler:    _LizardAgent_GetStatefulsetPod_Handler,
		},
		{
			MethodName: "getEvent",
			Handler:    _LizardAgent_GetEvent_Handler,
		},
		{
			MethodName: "getPodStatus",
			Handler:    _LizardAgent_GetPodStatus_Handler,
		},
		{
			MethodName: "deleteYaml",
			Handler:    _LizardAgent_DeleteYaml_Handler,
		},
		{
			MethodName: "applyYaml",
			Handler:    _LizardAgent_ApplyYaml_Handler,
		},
		{
			MethodName: "getyaml",
			Handler:    _LizardAgent_Getyaml_Handler,
		},
		{
			MethodName: "rolloutDeployment",
			Handler:    _LizardAgent_RolloutDeployment_Handler,
		},
		{
			MethodName: "rolloutStatefulset",
			Handler:    _LizardAgent_RolloutStatefulset_Handler,
		},
		{
			MethodName: "scaleDeployment",
			Handler:    _LizardAgent_ScaleDeployment_Handler,
		},
		{
			MethodName: "scaleStatefulset",
			Handler:    _LizardAgent_ScaleStatefulset_Handler,
		},
		{
			MethodName: "getNamespaces",
			Handler:    _LizardAgent_GetNamespaces_Handler,
		},
		{
			MethodName: "getDeployment",
			Handler:    _LizardAgent_GetDeployment_Handler,
		},
		{
			MethodName: "getStatefulset",
			Handler:    _LizardAgent_GetStatefulset_Handler,
		},
		{
			MethodName: "getDeploymentQuota",
			Handler:    _LizardAgent_GetDeploymentQuota_Handler,
		},
		{
			MethodName: "getStatefulsetQuota",
			Handler:    _LizardAgent_GetStatefulsetQuota_Handler,
		},
		{
			MethodName: "createDestinationRule",
			Handler:    _LizardAgent_CreateDestinationRule_Handler,
		},
		{
			MethodName: "patchDestinationRule",
			Handler:    _LizardAgent_PatchDestinationRule_Handler,
		},
		{
			MethodName: "listDestinationRule",
			Handler:    _LizardAgent_ListDestinationRule_Handler,
		},
		{
			MethodName: "getDestinationRule",
			Handler:    _LizardAgent_GetDestinationRule_Handler,
		},
		{
			MethodName: "deleteDestinationRule",
			Handler:    _LizardAgent_DeleteDestinationRule_Handler,
		},
		{
			MethodName: "createVirtualService",
			Handler:    _LizardAgent_CreateVirtualService_Handler,
		},
		{
			MethodName: "patchVirtualService",
			Handler:    _LizardAgent_PatchVirtualService_Handler,
		},
		{
			MethodName: "listVirtualService",
			Handler:    _LizardAgent_ListVirtualService_Handler,
		},
		{
			MethodName: "getVirtualService",
			Handler:    _LizardAgent_GetVirtualService_Handler,
		},
		{
			MethodName: "deleteVirtualService",
			Handler:    _LizardAgent_DeleteVirtualService_Handler,
		},
		{
			MethodName: "helmUpdateRepo",
			Handler:    _LizardAgent_HelmUpdateRepo_Handler,
		},
		{
			MethodName: "helmInstallChart",
			Handler:    _LizardAgent_HelmInstallChart_Handler,
		},
		{
			MethodName: "helmUninstallChart",
			Handler:    _LizardAgent_HelmUninstallChart_Handler,
		},
		{
			MethodName: "helmUpgradeChart",
			Handler:    _LizardAgent_HelmUpgradeChart_Handler,
		},
		{
			MethodName: "helmListReleases",
			Handler:    _LizardAgent_HelmListReleases_Handler,
		},
		{
			MethodName: "helmGetValues",
			Handler:    _LizardAgent_HelmGetValues_Handler,
		},
		{
			MethodName: "helmReleaseHistory",
			Handler:    _LizardAgent_HelmReleaseHistory_Handler,
		},
		{
			MethodName: "helmRollback",
			Handler:    _LizardAgent_HelmRollback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent.proto",
}
